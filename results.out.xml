<testsuites errors="0" disabled="0" failures="1" tests="1" time="" name="Kubescape Scanning"><testsuite name="" disabled="0" errors="0" failures="0" hostname="" id="0" skipped="" time="" timestamp="2022-11-28 13:30:52.800417452 +0000 UTC" file="deployments/cricradio-go-deployment.yml"><properties></properties><testcase classname="" status="" name="" time=""><failure message="Total: 17 (Low: 4, Medium: 9, High: 4, Critical: 0)&#xA;&#xA;===================================================================================================================&#xA;&#xA;Resource: kind=Deployment/name=cricradio-go&#xA;&#xA;Test: Linux hardening&#xA;Severity: Medium&#xA;Remediation: You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.&#xA;Link: https://hub.armosec.io/docs/c-0055&#xA;Available fix: &#xA; - spec.template.spec.containers[0].seccompProfile=YOUR_VALUE&#xA; - spec.template.spec.containers[0].seLinuxOptions=YOUR_VALUE&#xA; - spec.template.spec.containers[0].capabilities.drop=YOUR_VALUE&#xA;&#xA;Test: K8s common labels usage&#xA;Severity: Low&#xA;Remediation: Define applicable labels or use the exception mechanism to prevent further notifications.&#xA;Link: https://hub.armosec.io/docs/c-0077&#xA;Available fix: &#xA; - metadata.labels=YOUR_VALUE&#xA; - spec.template.metadata.labels=YOUR_VALUE&#xA;&#xA;Test: The default namespace should not be used&#xA;Severity: Medium&#xA;Remediation: Ensure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace.&#xA;Link: https://hub.armosec.io/docs/cis-5.7.4&#xA;Available fix: &#xA; - metadata.namespace=YOUR_NAMESPACE&#xA;&#xA;Test: Non-root containers&#xA;Severity: Medium&#xA;Remediation: If your application does not need root privileges, make sure to define the runAsUser or runAsGroup under the PodSecurityContext and use user ID 1000 or higher. Do not turn on allowPrivlegeEscalation bit and make sure runAsNonRoot is true.&#xA;Link: https://hub.armosec.io/docs/c-0013&#xA;Available fix: &#xA; - spec.template.spec.containers[0].securityContext.runAsNonRoot=true&#xA; - spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation=false&#xA;&#xA;Test: Configured liveness probe&#xA;Severity: Medium&#xA;Remediation: Ensure Liveness probes are configured wherever possible.&#xA;Link: https://hub.armosec.io/docs/c-0056&#xA;Available fix: &#xA; - spec.template.spec.containers[0].livenessProbe=YOUR_VALUE&#xA;&#xA;Test: Resource limits&#xA;Severity: High&#xA;Remediation: Define LimitRange and Resource Limits in the namespace or in the deployment/POD yamls.&#xA;Link: https://hub.armosec.io/docs/c-0009&#xA;Available fix: &#xA; - spec.template.spec.containers[0].resources.limits.cpu=YOUR_VALUE&#xA; - spec.template.spec.containers[0].resources.limits.memory=YOUR_VALUE&#xA;&#xA;Test: Apply Security Context to Your Pods and Containers&#xA;Severity: High&#xA;Remediation: Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.&#xA;Link: https://hub.armosec.io/docs/cis-5.7.3&#xA;Available fix: &#xA; - spec.template.spec.containers[0].securityContext.readOnlyRootFilesystem=true&#xA; - spec.template.spec.containers[0].securityContext.runAsNonRoot=true&#xA; - spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation=false&#xA; - spec.template.spec.containers[0].securityContext.capabilities.drop=NET_RAW&#xA; - spec.template.spec.containers[0].securityContext.seLinuxOptions=YOUR_VALUE&#xA; - spec.template.spec.containers[0].securityContext.seccompProfile=YOUR_VALUE&#xA;&#xA;Test: Resources memory limit and request&#xA;Severity: High&#xA;Remediation: Set the memory limit or use exception mechanism to avoid unnecessary notifications.&#xA;Link: https://hub.armosec.io/docs/c-0004&#xA;Available fix: &#xA; - spec.template.spec.containers[0].resources.limits.memory=YOUR_VALUE&#xA; - spec.template.spec.containers[0].resources.requests.memory=YOUR_VALUE&#xA;&#xA;Test: Ensure that the seccomp profile is set to docker/default in your pod definitions&#xA;Severity: Medium&#xA;Remediation: Use security context to enable the `docker/default` seccomp profile in your pod definitions. An example is as below:&#xA;&#xA; &#xA;```&#xA;  securityContext:&#xA;    seccompProfile:&#xA;      type: RuntimeDefault&#xA;&#xA;```&#xA;Link: https://hub.armosec.io/docs/cis-5.7.2&#xA;Available fix: &#xA; - spec.template.spec.containers[0].securityContext.seccompProfile.type=RuntimeDefault&#xA;&#xA;Test: Allow privilege escalation&#xA;Severity: Medium&#xA;Remediation: If your application does not need it, make sure the allowPrivilegeEscalation field of the securityContext is set to false.&#xA;Link: https://hub.armosec.io/docs/c-0016&#xA;Available fix: &#xA; - spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation=false&#xA;&#xA;Test: Resources CPU limit and request&#xA;Severity: High&#xA;Remediation: Set the CPU limit or use exception mechanism to avoid unnecessary notifications.&#xA;Link: https://hub.armosec.io/docs/c-0050&#xA;Available fix: &#xA; - spec.template.spec.containers[0].resources.limits.cpu=YOUR_VALUE&#xA; - spec.template.spec.containers[0].resources.requests.cpu=YOUR_VALUE&#xA;&#xA;Test: Ingress and Egress blocked&#xA;Severity: Medium&#xA;Remediation: Define a network policy that restricts ingress and egress connections.&#xA;Link: https://hub.armosec.io/docs/c-0030&#xA;&#xA;Test: Configured readiness probe&#xA;Severity: Low&#xA;Remediation: Ensure Readiness probes are configured wherever possible.&#xA;Link: https://hub.armosec.io/docs/c-0018&#xA;Available fix: &#xA; - spec.template.spec.containers[0].readinessProbe=YOUR_VALUE&#xA;&#xA;Test: Images from allowed registry&#xA;Severity: Medium&#xA;Remediation: You should enable all trusted repositories in the parameters of this control.&#xA;Link: https://hub.armosec.io/docs/c-0078&#xA;Failed paths: &#xA; - spec.template.spec.containers[0].image&#xA;&#xA;Test: Immutable container filesystem&#xA;Severity: Low&#xA;Remediation: Set the filesystem of the container to read-only when possible (POD securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.&#xA;Link: https://hub.armosec.io/docs/c-0017&#xA;Available fix: &#xA; - spec.template.spec.containers[0].securityContext.readOnlyRootFilesystem=true&#xA;&#xA;Test: CVE-2022-0492-cgroups-container-escape&#xA;Severity: Medium&#xA;Remediation: Activate AppArmor or SELinux. Follow the least privilege principle and remove root privileges or privilege escalation option and CAP_DAC_OVERRIDE capability. Make sure you don&#39;t allow container images from potentially dangerous sources and that containers that must have high privileges are taken from protected repositories.&#xA;Link: https://hub.armosec.io/docs/c-0086&#xA;Available fix: &#xA; - spec.template.spec.securityContext.runAsNonRoot=true&#xA; - spec.template.spec.securityContext.allowPrivilegeEscalation=false&#xA;&#xA;Test: Pods in default namespace&#xA;Severity: Low&#xA;Remediation: Create necessary namespaces and move all the PODs from default namespace there.&#xA;Link: https://hub.armosec.io/docs/c-0061&#xA;Available fix: &#xA; - metadata.namespace=YOUR_NAMESPACE&#xA;&#xA;" type="Resources"></failure></testcase></testsuite></testsuites>